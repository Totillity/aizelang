
trait Addable(T: type) {
    def add(a: T, b: T) -> T;
}


struct Point_t {
    attr x: i32;
    attr y: i32;
    attr z: i32;
}


class Point : Point_t {
    def new(x: i32, y: i32, z: i32) -> Point {
        var p: Point = malloc(Point_t);
        return p;
    }
}


# impl Addable(Point) for Point {
#     def add(a: Point, b: Point) -> Point {
#         return Point::new(a.x + b.x, a.y + b.y, a.z + b.z);
#     }
# };
#
# def sum(T: class > Addable(T))(a: T, b: T) -> T {
#     return T::add(a, b);
# };


def main() -> i32 {
    var a: Point = Point::new(x=0, y=50, z=-3);
    var b: Point = Point::new(-3, 4, 7);

    var c: Point = sum(Point)(a, b);

    a.add(b);
}